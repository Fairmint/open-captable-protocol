generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Issuer {
    id                               String        @id @default(uuid())
    object_type                      String        @default("ISSUER")
    legal_name                       String
    dba                              String?
    formation_date                   String
    country_of_formation             String        @db.VarChar(2)
    country_subdivision_of_formation String        @db.VarChar(3)
    TaxID                            TaxID[]
    email                            String?
    phone                            String?
    address                          Address?      @relation(fields: [addressId], references: [id])
    addressId                        String?
    initial_shares_authorized        Int?
    stakeholders                     Stakeholder[]
	stockClasses                     StockClass[]
    comments                         String?
}

model Address {
    id                  String        @id @default(uuid())
    address_type        AddressType
    street_suite        String
    city                String
    country_subdivision String        @db.VarChar(3)
    country             String        @db.VarChar(2)
    postal_code         String
    issuers             Issuer[] // Relationship to the issuer
    stakeholders        Stakeholder[] // Relationship to the stakeholder
}

model TaxID {
    id            String       @id @default(uuid())
    tax_id        String
    country       String	   @db.VarChar(2)
    Issuer        Issuer?      @relation(fields: [issuerId], references: [id])
    issuerId      String?
    Stakeholder   Stakeholder? @relation(fields: [stakeholderId], references: [id])
    stakeholderId String?
}

model StockClass {
    id                              String                      @id @default(uuid())
    stakeholders                    Stakeholder[]
    name                            String
    class_type                      StockClassType
    default_id_prefix               String
    initial_shares_authorized       Decimal  @db.Decimal(20, 10)
    board_approval_date             String?
    stockholder_approval_date       String?
    votes_per_share                 Float
    par_value                       Float?
    price_per_share                 Float?
    seniority                       Float
    liquidation_preference_multiple Float?
    participation_cap_multiple      Float?
    conversion_rights_from          StockClassConversionRight[] @relation("FromStockClass")
    conversion_rights_to            StockClassConversionRight[] @relation("ToStockClass")
    StockPlan                       StockPlan[]
	issuer                          Issuer?                     @relation(fields: [issuerId], references: [id])
	issuerId                        String?
}

model StockClassConversionRight {
    id                 String     @id @default(uuid())
    from_class_id      String
    from_class         StockClass @relation("FromStockClass", fields: [from_class_id], references: [id])
    to_class_id        String
    to_class           StockClass @relation("ToStockClass", fields: [to_class_id], references: [id])
    conversion_ratio   Float
    conversion_trigger Float?
    conversion_price   Float?
}

model StockPlan {
    id                            String                             @id @default(uuid())
    plan_name                     String
    board_approval_date           String?
    stockholder_approval_date     String?
    initial_shares_reserved       Float
    default_cancellation_behavior StockPlanCancellationBehaviorType?
    stock_class                   StockClass                         @relation(fields: [stock_class_id], references: [id])
    stock_class_id                String
    comments                      String?
}

model Valuation {
    id                        String        @id @default(uuid())
    provider                  String?
    board_approval_date       String?
    stockholder_approval_date String?
    price_per_share           Decimal
    effective_date            String
    stock_class_id            String
    valuation_type            ValuationType
    comments                  String?
}

model Stakeholder {
    id                       String                       @id @default(uuid())
    stockClass               StockClass                   @relation(fields: [stockClassId], references: [id])
    stockClassId             String
    issuerId                 String
    issuer                   Issuer                       @relation(fields: [issuerId], references: [id])
    name                     Name                         @relation(fields: [nameId], references: [id])
    stakeholder_type         StakeholderType
    issuer_assigned_id       String?
    current_relationship     StakeholderRelationshipType?
    primary_contact          ContactInfo?                 @relation(fields: [contactInfoId], references: [id])
    contact_info             ContactInfoWithoutName?      @relation(fields: [contactInfoWithoutNameId], references: [id])
    addresses                Address[]
    tax_ids                  TaxID[]
    comments                 String?
    nameId                   String
    contactInfoId            String?
    contactInfoWithoutNameId String?
}

model VestingTerms {
    id                 String             @id @default(uuid())
    name               String
    description        String
    allocation_type    AllocationType     @relation(fields: [allocation_type_id], references: [id])
    allocation_type_id String
    vesting_conditions VestingCondition[]
    comments           String?
}

model AllocationType {
    id              String             @id @default(uuid())
    allocation_type AllocationTypeEnum
    VestingTerms    VestingTerms[]
}

model VestingCondition {
    id                  String          @id @default(uuid())
    vesting_schedule    VestingSchedule @relation(fields: [vesting_schedule_id], references: [id])
    vesting_schedule_id String
    event               VestingEvent    @relation(fields: [event_id], references: [id])
    event_id            String
    VestingTerms        VestingTerms?   @relation(fields: [vestingTermsId], references: [id])
    vestingTermsId      String?
}

model VestingSchedule {
    id               String             @id @default(uuid())
    vesting_schedule String
    VestingCondition VestingCondition[]
}

model VestingEvent {
    id               String             @id @default(uuid())
    event_type       VestingEventType   @relation(fields: [event_type_id], references: [id])
    event_type_id    String
    date             String
    VestingCondition VestingCondition[]
}

model VestingEventType {
    id           String         @id @default(uuid())
    event_type   String
    VestingEvent VestingEvent[]
}

model Name {
    id          String        @id @default(uuid())
    legal_name  String
    first_name  String?
    last_name   String?
    Stakeholder Stakeholder[]
    ContactInfo ContactInfo[]
}

model ContactInfo {
    id            String        @id @default(uuid())
    name          Name          @relation(fields: [nameId], references: [id])
    phone_numbers Phone[]
    emails        Email[]
    Stakeholder   Stakeholder[]
    nameId        String
}

model ContactInfoWithoutName {
    id            String        @id @default(uuid())
    phone_numbers Phone[]
    emails        Email[]
    Stakeholder   Stakeholder[]
}

model Email {
    id                       String                  @id @default(uuid())
    email_type               EmailType
    email_address            String
    ContactInfo              ContactInfo?            @relation(fields: [contactInfoId], references: [id])
    contactInfoId            String?
    ContactInfoWithoutName   ContactInfoWithoutName? @relation(fields: [contactInfoWithoutNameId], references: [id])
    contactInfoWithoutNameId String?
}

model Phone {
    id                       String                  @id @default(uuid())
    phone_type               PhoneType
    phone_number             String
    ContactInfo              ContactInfo?            @relation(fields: [contactInfoId], references: [id])
    contactInfoId            String?
    ContactInfoWithoutName   ContactInfoWithoutName? @relation(fields: [contactInfoWithoutNameId], references: [id])
    contactInfoWithoutNameId String?
}

// * ENUMS

enum StockClassType {
    PREFERRED
    COMMON
}

enum StockPlanCancellationBehaviorType {
    RETURN_TO_POOL
    CANCEL
}

enum ValuationType {
    PREMONEY
    POSTMONEY
}

enum AllocationTypeEnum {
    ROUND_DOWN
    ROUND_UP
}

enum AddressType {
    LEGAL
    CONTACT
    OTHER
}

enum EmailType {
    PERSONAL
    BUSINESS
    OTHER
}

enum PhoneType {
    MOBILE
    HOME
    BUSINESS
}

enum StakeholderType {
    INDIVIDUAL
    INSTITUTION
}

enum StakeholderRelationshipType {
    ADVISOR
    BOARD_MEMBER
    CONSULTANT
    EMPLOYEE
    EX_ADVISOR
    EX_CONSULTANT
    EX_EMPLOYEE
    EXECUTIVE
    FOUNDER
    INVESTOR
    NON_US_EMPLOYEE
    OFFICER
    OTHER
}